{"version":3,"file":"preklad-io-js-client.cjs","sources":["../src/config.ts","../src/api-error.ts","../src/performFetch.ts","../src/translate.ts"],"sourcesContent":["export type FetchFunction = (url: string, options: object) => Promise<any>;\n\nfunction tryGettingFetch() {\n  // this is browser, fetch exists\n  if (typeof self !== \"undefined\") {\n    return fetch.bind(self);\n  }\n\n  if (typeof global !== \"undefined\" && global.fetch) {\n    return global.fetch;\n  }\n\n  return null;\n}\n\n/**\n * The configuration object definition\n */\nclass ApiConfig {\n  API_URL = \"https://api.preklad.io/api/translate\";\n  //API_URL = \"http://localhost:8080/api/translate\";\n  /**\n   * Preklad.io  API key\n   * https://preklad.io\n   */\n  private _apiKey = \"\";\n\n  /**\n   * The fetch function. To be set if in Node < 18, otherwise\n   * will be automatically resolved.\n   */\n  private _fetch: FetchFunction | null = tryGettingFetch();\n\n  /**\n   * Set the API key from preklad.io\n   * https://preklad.io\n   */\n  set apiKey(k: string) {\n    this._apiKey = k;\n  }\n\n  /**\n   * Get the API key\n   */\n  get apiKey(): string {\n    return this._apiKey;\n  }\n\n  /**\n   * Custom fetch function\n   */\n  set fetch(f: FetchFunction) {\n    this._fetch = f;\n  }\n\n  /**\n   * Get fetch function\n   */\n  get fetch(): FetchFunction | null {\n    return this._fetch;\n  }\n}\n\n/**\n * Configuration object\n */\nconst config = new ApiConfig();\n\nexport { ApiConfig, config };\n","/**\n * A ApiError is an Error that includes the HTTP response details\n */\nexport class ApiError extends Error {\n  constructor(errorCode: number, message: string) {\n    super(\n      `Call to endpoint failed with the error code ${errorCode}. ${message}`\n    );\n  }\n}\n","import { config } from \"./config\";\n\nexport async function performFetch(resource: string, options: any = {}) {\n  if (config.fetch === null) {\n    throw new Error(\n      \"The fetch function was not found. If on NodeJS < 18 specify the fetch function with config.fetch\"\n    );\n  }\n  const response = await config.fetch(resource, options);\n  if (resource.includes(\"/text\")) {\n    if (response.ok) {\n      return response.text();\n    }\n  }\n  return response.json();\n}\n","import { performFetch } from \"./performFetch\";\nimport { config } from \"./config\";\nimport { ApiError } from \"./api-error\";\nimport * as supportedLangs from \"./languages.json\";\n\n/**\n * Optional\n */\nexport type TranslateOptions = {\n  noCache?: boolean; // set to true to disable internal caching\n  ignoreWords?: string[]; // define words that should not be translated\n};\n\nconst translationsCache = new Map<string, any>();\nlet lastFromLanguage = \"en\";\nlet lastToLanguage = \"\";\n\n/**\n * Translate list of  texts  or  a plain text  to other language\n * @param translateData  is a plain text on a json object   i.e { 'hello.label': \"Hello World\", 'bye.label': \"Bye Bye World\"}\n * @param toLanguage -  target language code\n * @param fromLanguage - source language code,  'en' is used by default if missing\n * @param options - additional parameters  {noCache: boolean, ignoreWords?: string[]}  allow  to disable caching or put ignore words that should not be translated\n */\nasync function tr(\n  translateData: string | Object,\n  toLanguage: string,\n  fromLanguage: string = \"en\",\n  options: TranslateOptions = {}\n): Promise<Object | string> {\n  // validate input data\n  if (!config.apiKey) {\n    throw new Error(\"API-KEY is not defined.\");\n  }\n\n  if (!translateData) {\n    throw new Error(\"Invalid input data.\");\n  }\n\n  if (!fromLanguage) {\n    if (!lastFromLanguage) {\n      fromLanguage = \"en\";\n    }\n    fromLanguage = lastFromLanguage;\n  }\n\n  if (!toLanguage) {\n    if (!lastToLanguage) {\n      throw new Error(\"Target language code is not defined.\");\n    }\n    toLanguage = lastToLanguage;\n  }\n\n  if (supportedLangs.langs.find((l) => l.code === fromLanguage) === undefined) {\n    throw new Error(\"Source language code is not supported. \" + fromLanguage);\n  }\n\n  if (supportedLangs.langs.find((l) => l.code === toLanguage) === undefined) {\n    throw new Error(\"Target language code is not supported.\" + toLanguage);\n  }\n\n  if (typeof translateData === \"string\") {\n    // translate plain text\n    const result = await translateText(\n      translateData,\n      fromLanguage,\n      toLanguage,\n      options.ignoreWords\n    );\n    if (!options.noCache) {\n      saveDataToCache(result, toLanguage, fromLanguage, translateData);\n    }\n    lastFromLanguage = fromLanguage;\n    lastToLanguage = toLanguage;\n\n    return result;\n  } else {\n    // translate object\n    const result = await translateObject(\n      translateData,\n      fromLanguage,\n      toLanguage,\n      options.ignoreWords\n    );\n    if (!options.noCache) {\n      saveDataToCache(result, toLanguage, fromLanguage);\n    }\n    lastFromLanguage = fromLanguage;\n    lastToLanguage = toLanguage;\n    return result;\n  }\n}\n\n/**\n *  Cache received translations  for future use\n */\nfunction saveDataToCache(\n  data: string | Object,\n  to: string,\n  from: string,\n  originalText: string = \"\"\n) {\n  const langKey = `${from}_${to}`;\n\n  let cache = translationsCache.get(langKey) || {};\n  if (typeof data === \"string\") {\n    const keyHash = simpleHash(originalText);\n    cache[keyHash] = data;\n    translationsCache.set(langKey, cache);\n  } else {\n    // join res.data with data\n    for (const [key, value] of Object.entries(data)) {\n      cache[key] = value;\n    }\n    translationsCache.set(langKey, cache);\n  }\n}\n\n/**\n * Find already translated data stored from cache. It returns key in case  translations has not been found.\n * @param key - key to translation data or  original text message in case of plain text translation\n * @param to - target language code. In case it's not defined, latest language code is used\n * @param from - source language code, In case it's not defined, latest language code is used\n */\nfunction find(key: string, to: string, from: string): string {\n  if (!key) {\n    return \"\";\n  }\n\n  if (!to) {\n    if (!lastToLanguage) {\n      throw new Error(\"Target language code is not defined.\");\n    }\n    to = lastToLanguage;\n  }\n\n  if (!from) {\n    from = lastFromLanguage || \"en\";\n  }\n\n  const langKey = `${from}_${to}`;\n  let data = translationsCache.get(langKey) || {};\n  if (!data) {\n    return key;\n  }\n\n  let value = data[key];\n  if (!!value) {\n    return value;\n  }\n  // try to get by hash\n  const keyHash = simpleHash(key);\n  return data[keyHash] || key;\n}\n\n/**\n * Clear internal cache  with translations  if any\n */\nfunction clearCache() {\n  translationsCache.clear();\n}\n\n/**\nLoad and translate several messages with the single reguest. Max request size is 1Mb. Result is stored in internal cache for future usage\n * @param translatedObject - data for translation in following format {key: 'text 1', key2: 'text 2'}\n * @param fromLanguage - source language code\n * @param toLanguage - target language code\n * @param ignoreWords - array of ignore words\n */\nasync function translateObject(\n  translatedObject: Object,\n  fromLanguage: string,\n  toLanguage: string,\n  ignoreWords: string[]\n): Promise<Object> {\n  const url = config.API_URL + \"/json\";\n\n  const request = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n      \"X-Key\": config.apiKey,\n      \"X-From\": fromLanguage,\n      \"X-To\": toLanguage,\n    },\n    body: JSON.stringify(translatedObject || {}),\n  };\n\n  if (ignoreWords?.length > 0) {\n    request.headers[\"X-ignore\"] = ignoreWords.join(\",\");\n  }\n\n  const res = await performFetch(url, request);\n  if (res.errorCode !== undefined) {\n    throw new ApiError(res.errorCode, res.message);\n  }\n\n  return res.data;\n}\n\n/**\n * Translate   plain text message\n * @param text\n * @param fromLanguage\n * @param toLanguage\n * @param ignoreWords - array of ignore words\n */\nasync function translateText(\n  text: string,\n  fromLanguage: string,\n  toLanguage: string,\n  ignoreWords?: string[]\n): Promise<string> {\n  const url = config.API_URL + \"/text\";\n  const request = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"text/plain\",\n      Accept: \"text/plain\",\n      \"X-key\": config.apiKey,\n      \"X-from\": fromLanguage,\n      \"X-to\": toLanguage,\n    },\n    body: text,\n  };\n\n  if (ignoreWords?.length > 0) {\n    request.headers[\"X-ignore\"] = ignoreWords.join(\",\");\n  }\n\n  const res = await performFetch(url, request);\n  if (res.errorCode !== undefined) {\n    throw new ApiError(res.errorCode, res.message);\n  }\n\n  return res;\n}\n\nconst simpleHash = (str) => {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i);\n    hash = (hash << 5) - hash + char;\n    hash &= hash; // Convert to 32bit integer\n  }\n  return new Uint32Array([hash])[0].toString(36);\n};\n\nconst translation = {\n  tr,\n  find,\n  clearCache,\n  config,\n};\n\nexport { translation };\n"],"names":["__async","supportedLangs.langs"],"mappings":"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"}